PD9waHAgCi8vV2lsbCBjb21lIGJhY2shCmZ1bmN0aW9uIGlzTGludXgoJHBhdGgpIAp7IAogICAgcmV0dXJuIChzdWJzdHIoJHBhdGgsMCwxKT09Ii8iID8gdHJ1ZSA6IGZhbHNlKTsgCn0gCmZ1bmN0aW9uIGdldFNsYXNoRGlyKCRpc0xpbnV4KSAKeyAKICAgIHJldHVybigkaXNMaW51eCA/ICcvJyA6ICdcXCcpOyAKfSAKLy9TZWUgaWYgd2UgYXJlIG9uIExpbnV4IG9yIFdpbmRvd3MgYmVjdWFzZSB0aGUgcGF0aHMgaGF2ZSB0byBiZSBwcm9jZXNzZWQgZGlmZmVyZW50bHkgCiRjd2Q9Z2V0Y3dkKCk7IAokaXNMaW51eD1pc0xpbnV4KCRjd2QpOyAKaWYoISRpc0xpbnV4KSAKeyAKICAgICRkcml2ZUxldHRlcj1zdWJzdHIoJGN3ZCwwLDEpOyAKfSAKJHNsYXNoPWdldFNsYXNoRGlyKCRpc0xpbnV4KTsgCiRwYXJ0cz1leHBsb2RlKCRzbGFzaCwkY3dkKTsgCiRyb290RGlyPSgkaXNMaW51eCA/ICRzbGFzaCA6ICgkZHJpdmVMZXR0ZXIgLiAnOicgLiAkc2xhc2gpKTsg+CmZ1bmN0aW9uIGNsZWFuUGF0aCgkcGF0aCwkaXNMaW51eCkgCnsgCiAgICAkc2xhc2g9Z2V0U2xhc2hEaXIoJGlzTGludXgpOyAKICAgICRwYXJ0cz1leHBsb2RlKCRzbGFzaCwkcGF0aCk7IAogICAgZm9yZWFjaCgkcGFydHMgYXMgJGtleT0+JHZhbCkvL1Byb2Nlc3MgLi4gZGlyZWN0b3JpZXMgYW5kIGEgc2luZ2xlIC4gCiAgICB7IAogICAgICAgIGlmKCR2YWw9PSIuLiIpIAogICAgICAgIHsgCiAgICAgICAgICAgICRwYXJ0c1ska2V5XT0iIjsgCiAgICAgICAgICAgICRsYXN0S2V5PSRrZXktMTsgCiAgICAgICAgICAgICRwYXJ0c1skbGFzdEtleV09IiI7IAogICAgICAgIH0gCiAgICAgICAgZWxzZWlmKCR2YWw9PSIuIikgCiAgICAgICAgeyAKICAgICAgICAgICAgJHBhcnRzWyRrZXldPSIiOyAKICAgICAgICB9IAogICAgfSAKICAgIHJlc2V0KCRwYXJ0cyk7IAogICAgJGZpeGVkUGF0aD0oJGlzTGludXggPyAiLyIgOiAiIik7Ly9Tb21lIFBIUCBjb25maWdzIHdvbnQgYXV0b21hdGljYWxseSBjcmVhdGUgYSB2YXJpYWJsZSBvbiAuPSBvciB3aWxsIGF0IGxlYXN0IHdoaW5lIGFib3V0IGl0CiAgICAkZmlyc3RQaWVjZT10cnVlOyAKICAgIGZvcmVhY2goJHBhcnRzIGFzICR2YWwpLy9Bc3NlbWJsZSB0aGUgcGF0aCBiYWNrIHRvZ2V0aGVyIAogICAgeyAKICAgICAgICBpZigkdmFsICE9ICIiKSAKICAgICAgICB7IAogICAgICAgICAgICAkZml4ZWRQYXRoIC49ICAoJGZpcnN0UGllY2UgPyAnJyA6ICRzbGFzaCkgLiAkdmFsOyAKICAgICAgICAgICAgJGZpcnN0UGllY2U9ZmFsc2U7IAogICAgICAgIH0gCiAgICB9IAogICAgaWYoJGZpeGVkUGF0aD09IiIpLy9JZiB3ZSB0b29rIG91dCB0aGUgZW50aXJlIHBhdGggZ28gdG8gYm90dG9tIGxldmVsIHRvIGF2b2lkIGFuIGVycm9yIAogICAgeyAKICAgICAgICAkZml4ZWRQYXRoPSgkaXNMaW51eCA/ICRzbGFzaCA6ICgkZHJpdmVMZXR0ZXIgLiAiOiIgLiAkc2xhc2gpKTsgCiAgICB9IAogICAgIAogICAgLy9NYWtlIHN1cmUgdGhlcmUgaXMgYW4gZW5kaW5nIHNsYXNoIAogICAgaWYoc3Vic3RyKCRmaXhlZFBhdGgsLTEpIT0kc2xhc2gpIAogICAgICAgICRmaXhlZFBhdGggLj0gJHNsYXNoOyAKICAgIHJldHVybiAkZml4ZWRQYXRoOyAKfSA=